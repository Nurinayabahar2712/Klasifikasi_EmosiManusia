# -*- coding: utf-8 -*-
"""klasifikasi_emosiManusia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkuPwGx_tjB47r8jMnaaHGK6VZss3EGL

## Mengimpor Perpustakaan yang Diperlukan
"""

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd
import os
import glob as gb
from tensorflow import keras

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

"""## Menetapkan Jalur untuk Pengumpulan Data



"""

# Direktori data latih dan uji
TRAIN_DIR = "/content/drive/MyDrive/train"
TEST_DIR = "/content/drive/MyDrive/test"
BATCH_SIZE=64

"""### Will see how many categories and images present"""

# Mengecek jumlah file dalam setiap folder di data latih
for folder in os.listdir(TRAIN_DIR):
    files = gb.glob(pathname= str(TRAIN_DIR+ '/'+ folder + '/*.jpg'))
    print(f'Untuk data latih, ditemukan {len(files)} file di folder {folder}')

# Mengecek jumlah file dalam setiap folder di data uji
for folder in os.listdir(TEST_DIR):
    files = gb.glob(pathname= str(TEST_DIR+ '/'+ folder + '/*.jpg'))
    print(f'Untuk data uji, ditemukan {len(files)} file di folder {folder}')

"""### Will see some random images withe their labels"""

# Fungsi untuk melihat gambar secara acak dari folder tertentu
import random
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def view_random_image(target_dir, target_class):
    # Melihat gambar dari folder ini
    target_folder = target_dir + '/' + target_class  # Tambahkan '/' jika diperlukan

    # Memilih gambar acak
    random_image = random.sample(os.listdir(target_folder), 1)  # Ganti od dengan os

    # Membaca dan menampilkan gambar menggunakan matplotlib
    img = mpimg.imread(target_folder + '/' + random_image[0])
    plt.imshow(img)
    plt.title(target_class)
    plt.axis('off')
    print(f"Image shape {img.shape}")

    return img

# Daftar nama kelas
class_names = ['Anger','Disgust','Fear','Happiness','Sadness','Surprise']

# Menampilkan gambar acak
plt.figure(figsize=(20,10))
for i in range(18):
    plt.subplot(3, 6, i+1)
    class_name = random.choice(class_names)
    img = view_random_image(target_dir="/content/drive/MyDrive/train", target_class=class_name)

"""### Preparing data for training"""

# Membuat generator data gambar
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(TRAIN_DIR,
                                                 target_size=(128, 128),
                                                 batch_size=BATCH_SIZE,
                                                 class_mode='categorical')

test_set = test_datagen.flow_from_directory(TEST_DIR,
                                            target_size=(128, 128),
                                            batch_size=BATCH_SIZE,
                                            class_mode='categorical')

"""### Basic model building (CNN Classifier)"""

# Inisialisasi model CNN
classifier = Sequential()

# Langkah 1 - Lapisan Konvolusi
classifier.add(Conv2D(16, (3, 3), input_shape = (128, 128, 3), activation = 'relu'))

# Langkah 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Menambahkan lapisan konvolusi kedua
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Langkah 3 - Meratakan (Flattening)
classifier.add(Flatten())

# Langkah 4 - Koneksi penuh
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 6, activation = 'softmax'))

# # Mengompilasi model CNN
classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# model summary
classifier.summary()

history = classifier.fit(training_set,
                         epochs = 50,
                         validation_data = test_set)


classifier.save('model1.h5')  # Menyimpan model

"""### Mengevaluasi model"""

#Mengevaluasi model
classifier.evaluate(test_set)

# Menampilkan grafik loss
pd.DataFrame(history.history)[['loss','val_loss']].plot()
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('Loss')

# Menampilkan grafik akurasi
pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('Accuracy')

from keras.models import load_model
import matplotlib.pyplot as plt
import numpy as np
import cv2
from PIL import Image

# Memuat model yang telah disimpan
model_path = "model1.h5"
loaded_model = load_model(model_path)

# Membaca gambar
image = cv2.imread("/content/drive/MyDrive/test/Disgust/myvideo_frames0_jpg.rf.0bc0c41aed72fe013a0352f04e3a298d.jpg")

# Memastikan gambar dibaca dengan benar
if image is not None:
    # Mengubah array gambar menjadi format RGB
    image_fromarray = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

    # Mengubah ukuran gambar menjadi 128x128 piksel
    resize_image = image_fromarray.resize((128, 128))

    # Memperluas dimensi untuk menyesuaikan input model
    expand_input = np.expand_dims(resize_image, axis=0)
    input_data = np.array(expand_input)

    # Normalisasi piksel gambar
    input_data = input_data / 255.0

    # Melakukan prediksi
    pred = loaded_model.predict(input_data)

    # Menentukan hasil kelas dengan argmax
    result = pred.argmax()
    print(f"Prediksi kelas: {result}")
else:
    print("Gambar tidak ditemukan. Pastikan path file gambar benar.")

training_set.class_indices